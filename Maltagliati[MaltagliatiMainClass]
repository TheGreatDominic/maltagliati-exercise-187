//AUTHOR: Dominic Maltagliati
//COURSE: CPT 187
//PURPOSE: Allows a customer to create an account, login, and make a transaction
//CREATEDATE: 08 FEB 2022

package edu.cpt187.maltagliati.exercise6;

import java.util.Scanner;

public class MaltagliatiMainClass 
{//start main class

	//MAIN CONSTANT VARIABLE DECLARATION
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	public static void main(String[] args) 
	{//start main method

		//orderTemplate
		Order currentOrder = new Order();

		//inventoryTemplate
		Inventory currentInventory = new Inventory();

		//writeOrder template
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);

		//userAccount template
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		//declare and initialize scanner
		Scanner input = new Scanner(System.in);

		//local variable declaration
		String userName = "";
		char menuSelection = ' ';

		//display welcome banner
		displayWelcomeBanner();

		//prime read
		menuSelection = validateMenuSelection(input);

		while(menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();

			userName = getUserName(input);

			if(menuSelection != 'A')
			{

				currentUser.setSearchedIndex(userName);

				if(currentUser.getSearchedIndex() >= 0)
				{

					displayAccountResults(userName);

				}//end get searched index >= 0

				else
				{

					currentUser.setWriteOneRecord(userName, getPassword(input));

					displayAccountResults();

				}//end get searched index < 0

			}//end while menu selection != A

			else
			{//start main menu selection == A



				currentUser.setSearchedIndex(userName, getPassword(input));

				if(currentUser.getSearchedIndex() < 0)
				{

					displayLoginError();

				}//end login error

				else
				{

					menuSelection = validateFileSelection(input);

					while(menuSelection != 'R')
					{

						if(menuSelection == 'A')
						{

							currentInventory.setLoadItems(getFileName(input));

							if(currentInventory.getRecordCount() <= 0)
							{

								displayFileError();

							}//end file error

							else
							{

								displayRecordReport(currentInventory.getRecordCount());

							}//end no file error

						}//end menu selection == A

						else
						{//start menu selection != A

							currentInventory.setSearchIndex(validateSearchValue(input));

							if(currentInventory.getItemSearchIndex() < 0)
							{

								displayNotFound();

							}//end item not found

							else
							{

								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());

								currentOrder.setItemID(currentInventory.getItemIDs());

								currentOrder.setItemName(currentInventory.getItemNames());

								currentOrder.setItemPrice(currentInventory.getItemPrices());

								currentOrder.setHowMany(validateHowMany(input));;

								if(currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{

									displayOutOfStock();

								}//end item not in stock

								else
								{

									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));

									currentOrder.setDiscountName(currentInventory.getDiscountNames());

									currentOrder.setDiscountRate(currentInventory.getDiscountRates());

									currentOrder.setDecreaseInStock(currentInventory);

									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());

									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());

									if(currentOrder.getDiscountRate() > 0.0)
									{
										displayOrderReport(userName, currentOrder.getItemName(), 
												currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), 
												currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(),  
												currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), 
												currentOrder.getTotalCost(), currentOrder.getPrizeName(), 
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));

									}//end yes discount

									else
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), 
												currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), 
												currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), 
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//end no discount

								}//end item in stock

							}//end item found

						}//end menu selection != A

						menuSelection = validateFileSelection(input);

					}//end while menu selection != R

				}//end searched index < 0

			}//end main menu selection == A

			menuSelection = validateMenuSelection(input);

		}//end while menu selection != Q

		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());

		if(orders.getRecordCount() > 0)
		{

			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), 
					currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), 
					currentInventory.getGrandTotal());

		}//end orders made

		displayFarewellMessage();


		input.close();
	}//end main method

	//VOID METHODS

	public static void displayWelcomeBanner()//return type void
	{//Start display welcome message
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("Welcome to the transaction calculation program!"); //banner
		System.out.println("This program will allow you to calculate the cost of"); //reason users should use the program
		System.out.println("a transaction to purchase various items");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
	}//end display welcome message

	public static void displayFarewellMessage()//return type void
	{//Start display farewell message
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("Thank you for using the transaction calculation program!"); //banner
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
	}//end display farewell message

	public static void displayMainMenu()//return type void
	{//start main menu

		int localIndex = 0;

		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.printf("%-20s\n", "MAIN MENU"); //Menu title

		while (localIndex < MENU_OPTIONS.length)
		{
			System.out.printf("%-4s%-20s\n", MENU_CHARS[localIndex], MENU_OPTIONS[localIndex]); //Selection option
			localIndex++;
		}//end while (localIndex < MENU_OPTIONS.length)

		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("Enter your selection here:"); //prompts user for selection	


	}//end main menu

	public static void displayFileMenu()//return type void
	{//start main menu

		int localIndex = 0;

		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.printf("%-20s\n", "FILE MENU"); //Menu title

		while (localIndex < FILE_MENU_OPTIONS.length)
		{
			System.out.printf("%-4s%-20s\n", FILE_MENU_CHARS[localIndex], FILE_MENU_OPTIONS[localIndex]); //Selection option
			localIndex++;
		}//end while (localIndex < MENU_OPTIONS.length)

		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("Enter your selection here:"); //prompts user for selection	


	}//end file menu

	public static void displayFileError()//return type void
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("FILE ERROR"); //banner
		System.out.println("The file name was not found or could not be opened");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
	}//end display file error report

	public static void displayLoginError()//return type void
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("LOGIN ERROR"); //banner
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
	}//end display login error report

	public static void displayNotFound()//return type void
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("NOT FOUND ERROR"); //banner
		System.out.println("The search value entered was not found");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
	}//end display not found report

	public static void displayOutOfStock()//return type void
	{//Start out of stock message
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("OUT OF STOCK ERROR"); //banner
		System.out.println("The quantity entered is greater than the quantity in-stock.");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
	}//end out of stock message

	public static void displayAccountResults()//return type void
	{//Start out of stock message
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("ACCOUNT RESULTS"); //banner
		System.out.println("New Account Created");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
	}//end account results message

	public static void displayAccountResults(String userName)//return type void
	{//Start out of stock message
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("ACCOUNT RESULTS"); //banner
		System.out.println("Account not created: username, " + userName + ", already exists");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
	}//end account results message overloaded

	public static void displayRecordReport(int borrowedRecordCount)//return type void
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("RECORD REPORT"); //banner
		System.out.printf("%-4s%-27s\n", borrowedRecordCount, "records processed"); //Label on the left and value held by variable on the right
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
	}//end display record report

	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex = 0;

		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.printf("%-20s\n", "DISCOUNT MENU"); //Menu title

		while (localIndex < borrowedDiscountNames.length)
		{
			System.out.printf("%-4s%-23s%10.1f%3s\n", SUB_MENU_CHARS[localIndex], borrowedDiscountNames[localIndex], (borrowedDiscountRates[localIndex] * 100), "%"); //Selection option	
			localIndex++;
		}//end while (localIndex < borrowedItemNames.length)

		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("Please make your selection here:"); //prompts user for selection

	}//end displayDiscountMenu

	public static void displayOrderReport(String userName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost,
			String borrowedPrizeName, int borrowedInStockCounts)
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println( "ORDER REPORT"); //Report title
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.printf("%-27s%-27s\n", "Customer Name:", userName); //Label on the left and value held by variable on the right
		System.out.println(""); //blank line for aesthetics
		System.out.printf("%-27s%-27s\n", "Item Name:", borrowedItemName); //Label on the left and value held by variable on the right
		System.out.printf("%-27s%-2s%6.2f\n", "Item Price:", "$", borrowedItemPrice); //Label on the left and value held by variable on the right
		System.out.println(""); //blank line for aesthetics
		System.out.printf("%-31s%-7d\n", "Quantity:", borrowedHowMany); //Label on the left and value held by variable on the right
		System.out.println(""); //blank line for aesthetics
		System.out.printf("%-27s%-2s%6.2f\n", "Subtotal:", "$", borrowedSubTotal); //Label on the left and value held by variable on the right
		System.out.printf("%-31s%-3.1f%3s\n", "Tax Rate:", (borrowedTaxRate * 100), "%"); //Label on the left and value held by variable on the right
		System.out.printf("%-27s%-2s%6.2f\n", "Tax Amount:", "$", borrowedTaxAmt); //Label on the left and value held by variable on the right
		System.out.println(""); //blank line for aesthetics
		System.out.printf("%-27s%-2s%6.2f\n", "Order Total", "$", borrowedTotalCost); //Label on the left and value held by variable on the right
		System.out.println(""); //blank line for aesthetics
		System.out.printf("%-27s%-27s\n", "Prize:", borrowedPrizeName); //Label on the left and value held by variable on the right
		System.out.println(""); //blank line for aesthetics
		System.out.printf("%-19s%-3d%-27s\n", "Buy more now: Only", borrowedInStockCounts, "left in stock!"); //Label on the left and value held by variable on the right
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println(""); //blank line for aesthetics
	}//end display order report

	public static void displayOrderReport(String userName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, 
			double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost,
			String borrowedPrizeName, int borrowedInStockCounts)
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println( "ORDER REPORT"); //Report title
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.printf("%-27s%-27s\n", "Customer Name:", userName); //Label on the left and value held by variable on the right
		System.out.println(""); //blank line for aesthetics
		System.out.printf("%-27s%-27s\n", "Item Name:", borrowedItemName); //Label on the left and value held by variable on the right
		System.out.printf("%-27s%-2s%6.2f\n", "Item Price:", "$", borrowedItemPrice); //Label on the left and value held by variable on the right
		System.out.println(""); //blank line for aesthetics
		System.out.printf("%-27s%-27s\n", "Discount Name:", borrowedDiscountName); //Label on the left and value held by variable on the right
		System.out.printf("%-30s%4.1f%3s\n", "Discount Rate:", (borrowedDiscountRate * 100), "%"); //Label on the left and value held by variable on the right
		System.out.printf("%-27s%-2s%6.2f\n", "Discount Amount:", "$", borrowedDiscountAmt); //Label on the left and value held by variable on the right
		System.out.printf("%-27s%-2s%6.2f\n", "Discount Price:", "$", borrowedDiscountPrice); //Label on the left and value held by variable on the right
		System.out.println(""); //blank line for aesthetics
		System.out.printf("%-31s%-7d\n", "Quantity:", borrowedHowMany); //Label on the left and value held by variable on the right
		System.out.println(""); //blank line for aesthetics
		System.out.printf("%-27s%-2s%6.2f\n", "Subtotal:", "$", borrowedSubTotal); //Label on the left and value held by variable on the right
		System.out.printf("%-31s%-3.1f%3s\n", "Tax Rate:", (borrowedTaxRate * 100), "%"); //Label on the left and value held by variable on the right
		System.out.printf("%-27s%-2s%6.2f\n", "Tax Amount:", "$", borrowedTaxAmt); //Label on the left and value held by variable on the right
		System.out.println(""); //blank line for aesthetics
		System.out.printf("%-27s%-2s%6.2f\n", "Order Total", "$", borrowedTotalCost); //Label on the left and value held by variable on the right
		System.out.println(""); //blank line for aesthetics
		System.out.printf("%-27s%-27s\n", "Prize:", borrowedPrizeName); //Label on the left and value held by variable on the right
		System.out.println(""); //blank line for aesthetics
		System.out.printf("%-19s%-3d%-27s\n", "Buy more now: Only", borrowedInStockCounts, " left in stock!"); //Label on the left and value held by variable on the right
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println(""); //blank line for aesthetics
	}//end display order report

	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities,
			double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{

		int localIndex = 0;

		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("Final Report"); //Report title
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner

		while(localIndex < borrowedRecordCount)
		{
			System.out.printf("%-6s%-15s%-12s%-5s%-12s\n", "ID", "NAME", "PRICE", "QTY", "TOTAL"); //Label on the left and value held by variable on the right
			System.out.printf("%-6d%-15s%-2s%-10.2f%-5d%-2s%-6.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex], borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]); //Label on the left and value held by variable on the right
			System.out.println(""); //blank line for aesthetics
			localIndex++;
		}//end local index < borrowed record count

		System.out.printf("%-27s\n", "GRAND TOTAL"); //Label on the left and value held by variable on the right
		System.out.printf("%-3s%-8.2f\n", "$", borrowedGrandTotal); //Label on the left and value held by variable on the right


	}//end display final report


	//VR METHODS

	public static String getUserName(Scanner borrowedInput) //RETURN TYPE VR
	{//start get user name

		String localUserName = "";
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("Enter your username:"); //prompts user for name
		localUserName = borrowedInput.next(); //assigns the user input to the variable on the left

		return localUserName;

	}//end get user name

	public static String getPassword(Scanner borrowedInput) //RETURN TYPE VR
	{//start get password

		String localPassword = "";
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("Enter your password:"); //prompts user for name
		localPassword = borrowedInput.next(); //assigns the user input to the variable on the left

		return localPassword;
	}//end get password

	public static char validateMenuSelection(Scanner borrowedInput)//RETURN TYPE VR
	{//start validate menu selection

		char localRateSelection = ' ';

		displayMainMenu();

		localRateSelection =  borrowedInput.next().toUpperCase().charAt(0); //assigns the user input to the variable on the left

		while (localRateSelection != MENU_CHARS[0] && localRateSelection != MENU_CHARS[1] && localRateSelection != MENU_CHARS[2])
		{//start error while loop

			System.out.println("~~ERROR: Invalid Selection.~~~");

			displayMainMenu();

			localRateSelection =  borrowedInput.next().toUpperCase().charAt(0); //assigns the user input to the variable on the left
		}//end error while loop

		return localRateSelection;

	}//end validate menu selection

	public static char validateFileSelection(Scanner borrowedInput)//RETURN TYPE VR
	{//start validate file selection

		char localFileSelection = ' ';

		displayFileMenu();

		localFileSelection =  borrowedInput.next().toUpperCase().charAt(0); //assigns the user input to the variable on the left

		while (localFileSelection != FILE_MENU_CHARS[0] && localFileSelection != FILE_MENU_CHARS[1] && localFileSelection != FILE_MENU_CHARS[2])
		{//start error while loop

			System.out.println("~~ERROR: Invalid Selection.~~~");

			displayFileMenu();

			localFileSelection =  borrowedInput.next().toUpperCase().charAt(0); //assigns the user input to the variable on the left
		}//end error while loop

		return localFileSelection;

	}//end validate file selection

	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearchValue = 0;

		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("Enter the search value:"); //prompts user for search value
		localSearchValue = borrowedInput.nextInt();

		while (localSearchValue < 0)
		{//start error while loop

			System.out.println("~~ERROR: Invalid Search Value.~~~");

			System.out.println("Enter the search value:"); //prompts user for search value
			localSearchValue = borrowedInput.nextInt(); //assigns the user input to the variable on the left 
		}//end error while loop 

		return localSearchValue;

	}//end validate search value

	public static String getFileName(Scanner borrowedInput)//return type VR
	{
		String localFileName = "";

		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~"); //banner
		System.out.println("Enter the file name with extension (i.e. file.txt):"); //prompts user for name
		localFileName = borrowedInput.next();

		return localFileName;

	}//end get file name

	public static String validateHowMany(Scanner borrowedInput)
	{//start validate how many

		String localHowMany = "";		

		System.out.println("Please enter a quantity: "); //prompts user for quantity
		localHowMany = borrowedInput.next(); //assigns the user input to the variable on the left

		while (Integer.parseInt(localHowMany) <= 0)
		{//start error while loop

			System.out.println("~~ERROR: Invalid Quantity.~~~");

			System.out.println("Please enter a quantity: "); //prompts user for quantity
			localHowMany = borrowedInput.next(); //assigns the user input to the variable on the left 
		}//end error while loop 

		return localHowMany;

	}//end validate how many

	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)//RETURN TYPE VR
	{//start validate item menu

		char localItemSelection = ' ';

		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);

		localItemSelection =  borrowedInput.next().toUpperCase().charAt(0); //assigns the user input to the variable on the left
		while (localItemSelection != SUB_MENU_CHARS[0] && localItemSelection != SUB_MENU_CHARS[1] && localItemSelection != SUB_MENU_CHARS[2] && localItemSelection != SUB_MENU_CHARS[3])
		{//start error while loop

			System.out.println("~~ERROR: Invalid Selection.~~~");//ERROR MESSAGE

			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);

			localItemSelection = borrowedInput.next().toUpperCase().charAt(0); //assigns the user input to the variable on the left
		}//end error while loop

		return localItemSelection;
	}//end validate discount menu

}//end main class
